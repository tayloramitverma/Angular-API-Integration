{"version":3,"file":"material-tabs.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n"],"names":["host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","NgZone","ChangeDetectorRef","ViewportRuler","MatTabNav","propDecorators","backgroundColor","Input","MatTabLinkBase","MatTabLink","_tabNavBar","_elementRef","ngZone","platform","globalRippleOptions","tabIndex","_focusMonitor","_this","_super","call","this","_tabLinkRipple","setupTriggerEvents","nativeElement","rippleConfig","parseInt","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","disabled","stopMonitoring","decorators","Directive","args","exportAs","inputs","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","_MAT_INK_BAR_POSITIONER_FACTORY","element","left","offsetLeft","width","offsetWidth","setPrototypeOf","__proto__","Array","p","hasOwnProperty","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_ngZone","_inkBarPositioner","alignToElement","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","positions","inkBar","selector","ElementRef","template","TemplateRef","tslib_1.__extends","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","defineProperty","ngOnChanges","changes","next","ngOnDestroy","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","Component","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","pipe","startWith","_isCenterPosition","_position","subscribe","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","ViewContainerRef","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","styles","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","elementRef","focus","getOffsetLeft","getOffsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","_changeDetectorRef","_viewportRuler","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","bindEvent","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","merge","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","index","tab","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","forEach","_subscribeToTabLabels","tabs","i","realignInkBar","_tabHeader","_focusChanged","apply","map","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement"],"mappings":"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"}
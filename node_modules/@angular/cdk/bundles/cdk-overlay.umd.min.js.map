{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts","../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/connected-position-strategy.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n  private _isDisposed: boolean;\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (config.width === '100%') {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n      styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any,\n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    @Optional() private _platform?: Platform,\n    @Optional() private _overlayContainer?: OverlayContainer) { }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n        this._document);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param elementRef\n   */\n  flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  Optional,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality,\n              // @breaking-change 8.0.0 `_location` parameter to be made required.\n              @Optional() private _location?: Location) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document, this._location);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDimensions() { return this._flexibleDimensions; }\n  set flexibleDimensions(value: boolean) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._destroyOverlay();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n\n    this._overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position = this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY\n    }));\n\n    return positionStrategy\n      .setOrigin(this.origin.elementRef)\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n    this._updatePositionStrategy(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  /** Destroys the overlay created by this directive. */\n  private _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ((this._document as any).mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ((this._document as any).msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    return this._document.fullscreenElement ||\n           this._document.webkitFullscreenElement ||\n           (this._document as any).mozFullScreenElement ||\n           (this._document as any).msFullscreenElement ||\n           null;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[]) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEventSubscriptions > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject, Observer} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: HTMLElement;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Amount of subscribers to the `positionChanges` stream. */\n  private _positionChangeSubscriptions = 0;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number, y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> =\n      Observable.create((observer: Observer<ConnectedOverlayPositionChange>) => {\n        const subscription = this._positionChanges.subscribe(observer);\n        this._positionChangeSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._positionChangeSubscriptions--;\n        };\n      });\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: ElementRef | HTMLElement,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    private _platform?: Platform,\n    private _overlayContainer?: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n    if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._origin.getBoundingClientRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach() {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this.scrollables = scrollables;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef | HTMLElement): this {\n    this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      const minWidth = this._overlayRef.getConfig().minWidth;\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point,\n                               overlay: ClientRect,\n                               scrollPosition: ViewportScrollPosition): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width < viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n    }\n\n    if (overlay.height < viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChangeSubscriptions > 0) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.bottom - origin.y;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // @breaking-change 8.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n    // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n    // a required parameter.\n    let virtualKeyboardOffset = this._overlayContainer ?\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._origin.getBoundingClientRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => this._pane.classList.remove(cssClass));\n      this._appliedPanelClasses = [];\n    }\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Extended `CSSStyleDeclaration` that includes `scrollBehavior` which isn't part of the\n * built-in TS typings. Once it is, this declaration can be removed safely.\n * @docs-private\n */\ntype ScrollBehaviorCSSStyleDeclaration = CSSStyleDeclaration & {scrollBehavior: string};\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style as ScrollBehaviorCSSStyleDeclaration;\n      const bodyStyle = body.style as ScrollBehaviorCSSStyleDeclaration;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      Object.keys(config).forEach(k => {\n        const key = k as keyof OverlayConfig;\n\n        if (typeof config[key] !== 'undefined') {\n          this[key] = config[key];\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription, Observer} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\nimport {PositionStrategy} from './position/position-strategy';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  private _keydownEventsObservable: Observable<KeyboardEvent> =\n      Observable.create((observer: Observer<KeyboardEvent>) => {\n        const subscription = this._keydownEvents.subscribe(observer);\n        this._keydownEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._keydownEventSubscriptions--;\n        };\n      });\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Amount of subscriptions to the keydown events. */\n  _keydownEventSubscriptions = 0;\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document,\n      // @breaking-change 8.0.0 `_location` parameter to be made required.\n      private _location?: Location) {\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    // @breaking-change 8.0.0 remove the null check for `_location`\n    // once the constructor parameter is made required.\n    if (this._config.disposeOnNavigation && this._location) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n\n    // Stop listening for location changes.\n    this._locationChanges.unsubscribe();\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEventsObservable;\n  }\n\n  /** Gets the the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig) {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality) {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click',\n        (event: MouseEvent) => this._backdropClick.next(event));\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let timeoutId: number;\n      let finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n\n        clearTimeout(timeoutId);\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        backdropToDetach!.addEventListener('transitionend', finishDetach);\n      });\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n    });\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .asObservable()\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._previousHostParent.removeChild(this._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>,\n      viewportRuler: ViewportRuler,\n      document: Document,\n      // @breaking-change 8.0.0 `platform` parameter to be made required.\n      platform?: Platform) {\n\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy =\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n        .withFlexibleDimensions(false)\n        .withPush(false)\n        .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n"],"names":["this","left","offset","_justifyContent","GlobalPositionStrategy","prototype","centerVertically","top","_alignItems","apply","_overlayRef","hasAttached","styles","overlayElement","style","parentStyles","hostElement","config","getConfig","position","_cssPosition","marginLeft","width","_leftOffset","marginTop","height","_topOffset","marginBottom","_bottomOffset","marginRight","_rightOffset","justifyContent","direction","alignItems","dispose","_isDisposed","parent","classList","remove","OverlayPositionBuilder","_viewportRuler","_document","_platform","_overlayContainer","global","connectedTo","elementRef","originPos","overlayPos","ConnectedPositionStrategy","flexibleConnectedTo","FlexibleConnectedPositionStrategy","type","Injectable","args","providedIn","ViewportRuler","undefined","decorators","Inject","DOCUMENT","Platform","Optional","OverlayContainer","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_keyboardDispatcher","_injector","_ngZone","_directionality","_location","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","value","OverlayRef","createElement","id","add","appendChild","getContainerElement","_appRef","get","ApplicationRef","DomPortalOutlet","ScrollStrategyOptions","ComponentFactoryResolver","OverlayKeyboardDispatcher","Injector","NgZone","Directionality","Location","defaultPositionList","originX","originY","overlayX","overlayY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","Directive","selector","exportAs","ElementRef","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_growAfterOpen","_flexibleDimensions","_push","_backdropSubscription","Subscription","EMPTY","viewportMargin","open","backdropClick","EventEmitter","positionChange","attach","detach","overlayKeydown","_templatePortal","TemplatePortal","_scrollStrategyFactory","scrollStrategy","Object","defineProperty","_offsetX","offsetX","_position","_updatePositionStrategy","_offsetY","offsetY","coerceBooleanProperty","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","positions","length","_buildConfig","keydownEvents","subscribe","event","_this","next","keyCode","ESCAPE","positionStrategy","_createPositionStrategy","hasBackdrop","minWidth","minHeight","backdropClass","panelClass","map","currentPosition","setOrigin","origin","withPositions","withFlexibleDimensions","flexibleDimensions","withPush","push","withGrowAfterOpen","growAfterOpen","withViewportMargin","withLockedPosition","lockPosition","strategy","positionChanges","p","emit","updateSize","unsubscribe","TemplateRef","ViewContainerRef","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","NgModule","imports","BidiModule","PortalModule","ScrollingModule","exports","declarations","providers","OverlayModule","OVERLAY_PROVIDERS","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_super","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","getFullscreenElement","body","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","__extends","d","b","__","constructor","extendStatics","getMatScrollStrategyAlreadyAttachedError","Error","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","validateVerticalPosition","property","validateHorizontalPosition","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","key","hasOwnProperty","overlay","reposition","setPrototypeOf","__proto__","Array","__assign","assign","t","s","i","n","arguments","BlockScrollStrategy","document","_previousHTMLStyles","_isEnabled","enable","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","NoopScrollStrategy","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","getBoundingClientRect","_a","noop","close","block","ScrollDispatcher","disposeOnNavigation","keys","forEach","k","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","_attachedOverlays","_keydownListener","overlays","_keydownEventSubscriptions","_keydownEvents","_isAttached","index","indexOf","splice","SkipSelf","parentNode","removeChild","container","_portalOutlet","_host","_pane","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","_keydownEventsObservable","Observable","observer","subscription","_positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","complete","attachments","detachments","updatePositionStrategy","sizeConfig","tslib_1.__assign","setDirection","dir","getDirection","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId_1","finishDetach_1","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","cssClass","takeUntil","merge","children","_lastBoundingBoxSize","_isPushed","_canPush","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_positionChangeSubscriptions","_appliedPanelClasses","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit","score","weight","_previousPushAmount","lastPosition","withScrollableContainers","margin","canPush","isLocked","nativeElement","withDefaultOffsetX","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","_hasExactPosition","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","virtualKeyboardOffset","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","viewportRuler","platform","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","_width","_height","centerHorizontally"],"mappings":"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"}
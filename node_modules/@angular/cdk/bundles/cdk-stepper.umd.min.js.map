{"version":3,"file":"cdk-stepper.umd.min.js","sources":["../../src/cdk/stepper/step-label.ts","../../src/cdk/stepper/stepper.ts","../../src/cdk/stepper/stepper-button.ts","../../src/cdk/stepper/stepper-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[cdkStepLabel]',\n})\nexport class CdkStepLabel {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AbstractControl} from '@angular/forms';\nimport {CdkStepLabel} from './step-label';\nimport {Observable, Subject, of as obaservableOf} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\n\n/** Possible orientation of a stepper. */\nexport type StepperOrientation = 'horizontal' | 'vertical';\n\n/** Change event emitted on selection changes. */\nexport class StepperSelectionEvent {\n  /** Index of the step now selected. */\n  selectedIndex: number;\n\n  /** Index of the step previously selected. */\n  previouslySelectedIndex: number;\n\n  /** The step instance now selected. */\n  selectedStep: CdkStep;\n\n  /** The step instance previously selected. */\n  previouslySelectedStep: CdkStep;\n}\n\n/** The state of each step. */\nexport type StepState = 'number' | 'edit' | 'done' | 'error' | string;\n\n/** Enum to represent the different states of the steps. */\nexport const STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error'\n};\n\n/** InjectionToken that can be used to specify the global stepper options. */\nexport const MAT_STEPPER_GLOBAL_OPTIONS =\n  new InjectionToken<StepperOptions>('mat-stepper-global-options');\n\n/** Configurable options for stepper. */\nexport interface StepperOptions {\n  /**\n   * Whether the stepper should display an error state or not.\n   * Default behavior is assumed to be false.\n   */\n  showError?: boolean;\n\n  /**\n   * Whether the stepper should display the default indicator type\n   * or not.\n   * Default behavior is assumed to be true.\n   */\n  displayDefaultIndicatorType?: boolean;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-step',\n  exportAs: 'cdkStep',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkStep implements OnChanges {\n  private _stepperOptions: StepperOptions;\n  _showError: boolean;\n  _displayDefaultIndicatorType: boolean;\n\n  /** Template for step label if it exists. */\n  @ContentChild(CdkStepLabel) stepLabel: CdkStepLabel;\n\n  /** Template for step content. */\n  @ViewChild(TemplateRef) content: TemplateRef<any>;\n\n  /** The top level abstract control of the step. */\n  @Input() stepControl: AbstractControl;\n\n  /** Whether user has seen the expanded step content or not. */\n  interacted = false;\n\n  /** Plain text label of the step. */\n  @Input() label: string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** State of the step. */\n  @Input() state: StepState;\n\n  /** Whether the user can return to this step once it has been marked as complted. */\n  @Input()\n  get editable(): boolean { return this._editable; }\n  set editable(value: boolean) {\n    this._editable = coerceBooleanProperty(value);\n  }\n  private _editable = true;\n\n  /** Whether the completion of step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional = false;\n\n  /** Whether step is marked as completed. */\n  @Input()\n  get completed(): boolean {\n    return this._customCompleted == null ? this._getDefaultCompleted() : this._customCompleted;\n  }\n  set completed(value: boolean) {\n    this._customCompleted = coerceBooleanProperty(value);\n  }\n  private _customCompleted: boolean | null = null;\n\n  private _getDefaultCompleted() {\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n  }\n\n  /** Whether step has an error. */\n  @Input()\n  get hasError(): boolean {\n    return this._customError || this._getDefaultError();\n  }\n  set hasError(value: boolean) {\n    this._customError = coerceBooleanProperty(value);\n  }\n  private _customError: boolean | null = null;\n\n  private _getDefaultError() {\n    return this.stepControl && this.stepControl.invalid && this.interacted;\n  }\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(\n    @Inject(forwardRef(() => CdkStepper)) private _stepper: CdkStepper,\n    @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n    this._showError = !!this._stepperOptions.showError;\n  }\n\n  /** Selects this step component. */\n  select(): void {\n    this._stepper.selected = this;\n  }\n\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\n  reset(): void {\n    this.interacted = false;\n\n    if (this._customCompleted != null) {\n      this._customCompleted = false;\n    }\n\n    if (this._customError != null) {\n      this._customError = false;\n    }\n\n    if (this.stepControl) {\n      this.stepControl.reset();\n    }\n  }\n\n  ngOnChanges() {\n    // Since basically all inputs of the MatStep get proxied through the view down to the\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n    this._stepper._stateChanged();\n  }\n}\n\n@Directive({\n  selector: '[cdkStepper]',\n  exportAs: 'cdkStepper',\n})\nexport class CdkStepper implements AfterViewInit, OnDestroy {\n  /** Emits when the component is destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Used for managing keyboard focus. */\n  private _keyManager: FocusKeyManager<FocusableOption>;\n\n  /**\n   * @breaking-change 8.0.0 Remove `| undefined` once the `_document`\n   * constructor param is required.\n   */\n  private _document: Document | undefined;\n\n  /** The list of step components that the stepper is holding. */\n  @ContentChildren(CdkStep) _steps: QueryList<CdkStep>;\n\n  /** The list of step headers of the steps in the stepper. */\n  _stepHeader: QueryList<FocusableOption>;\n\n  /** Whether the validity of previous steps should be checked or not. */\n  @Input()\n  get linear(): boolean { return this._linear; }\n  set linear(value: boolean) { this._linear = coerceBooleanProperty(value); }\n  private _linear = false;\n\n  /** The index of the selected step. */\n  @Input()\n  get selectedIndex() { return this._selectedIndex; }\n  set selectedIndex(index: number) {\n    if (this._steps) {\n      // Ensure that the index can't be out of bounds.\n      if (index < 0 || index > this._steps.length - 1) {\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n      }\n\n      if (this._selectedIndex != index &&\n          !this._anyControlsInvalidOrPending(index) &&\n          (index >= this._selectedIndex || this._steps.toArray()[index].editable)) {\n        this._updateSelectedItemIndex(index);\n      }\n    } else {\n      this._selectedIndex = index;\n    }\n  }\n  private _selectedIndex = 0;\n\n  /** The step that is selected. */\n  @Input()\n  get selected(): CdkStep {\n    // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n    return this._steps ? this._steps.toArray()[this.selectedIndex] : undefined!;\n  }\n  set selected(step: CdkStep) {\n    this.selectedIndex = this._steps ? this._steps.toArray().indexOf(step) : -1;\n  }\n\n  /** Event emitted when the selected step has changed. */\n  @Output() selectionChange: EventEmitter<StepperSelectionEvent>\n      = new EventEmitter<StepperSelectionEvent>();\n\n  /** Used to track unique ID for each stepper component. */\n  _groupId: number;\n\n  protected _orientation: StepperOrientation = 'horizontal';\n\n  constructor(\n    @Optional() private _dir: Directionality,\n    private _changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `_elementRef` and `_document` parameters to become required.\n    private _elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    this._groupId = nextId++;\n    this._document = _document;\n  }\n\n  ngAfterViewInit() {\n    this._keyManager = new FocusKeyManager(this._stepHeader)\n      .withWrap()\n      .withVerticalOrientation(this._orientation === 'vertical');\n\n    (this._dir ? this._dir.change as Observable<Direction> : obaservableOf<Direction>())\n      .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n      .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n\n    this._keyManager.updateActiveItemIndex(this._selectedIndex);\n\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      if (!this.selected) {\n        this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Selects and focuses the next step in list. */\n  next(): void {\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);\n  }\n\n  /** Selects and focuses the previous step in list. */\n  previous(): void {\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n  }\n\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n  reset(): void {\n    this._updateSelectedItemIndex(0);\n    this._steps.forEach(step => step.reset());\n    this._stateChanged();\n  }\n\n  /** Returns a unique id for each step label element. */\n  _getStepLabelId(i: number): string {\n    return `cdk-step-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns unique id for each step content element. */\n  _getStepContentId(i: number): string {\n    return `cdk-step-content-${this._groupId}-${i}`;\n  }\n\n  /** Marks the component to be change detected. */\n  _stateChanged() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Returns position state of the step with the given index. */\n  _getAnimationDirection(index: number): StepContentPositionState {\n    const position = index - this._selectedIndex;\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n\n  /** Returns the type of icon to be displayed. */\n  _getIndicatorType(index: number, state: StepState = STEP_STATE.NUMBER): StepState {\n    const step = this._steps.toArray()[index];\n    const isCurrentStep = this._isCurrentStep(index);\n\n    return step._displayDefaultIndicatorType\n      ? this._getDefaultIndicatorLogic(step, isCurrentStep)\n      : this._getGuidelineLogic(step, isCurrentStep, state);\n  }\n\n  private _getDefaultIndicatorLogic(step: CdkStep, isCurrentStep: boolean): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (!step.completed || isCurrentStep) {\n      return STEP_STATE.NUMBER;\n    } else {\n      return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n    }\n  }\n\n  private _getGuidelineLogic(\n    step: CdkStep,\n    isCurrentStep: boolean,\n    state: StepState = STEP_STATE.NUMBER): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (step.completed && !isCurrentStep) {\n      return STEP_STATE.DONE;\n    } else if (step.completed && isCurrentStep) {\n      return state;\n    } else if (step.editable && isCurrentStep) {\n      return STEP_STATE.EDIT;\n    } else {\n      return state;\n    }\n  }\n\n  private _isCurrentStep(index: number) {\n    return this._selectedIndex === index;\n  }\n\n  /** Returns the index of the currently-focused step header. */\n  _getFocusIndex() {\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n  }\n\n  private _updateSelectedItemIndex(newIndex: number): void {\n    const stepsArray = this._steps.toArray();\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: this._selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[this._selectedIndex],\n    });\n\n    // If focus is inside the stepper, move it to the next header, otherwise it may become\n    // lost when the active step content is hidden. We can't be more granular with the check\n    // (e.g. checking whether focus is inside the active step), because we don't have a\n    // reference to the elements that are rendering out the content.\n    this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n                            this._keyManager.updateActiveItemIndex(newIndex);\n\n    this._selectedIndex = newIndex;\n    this._stateChanged();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    if (this._keyManager.activeItemIndex != null && (keyCode === SPACE || keyCode === ENTER)) {\n      this.selectedIndex = this._keyManager.activeItemIndex;\n      event.preventDefault();\n    } else if (keyCode === HOME) {\n      this._keyManager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  private _anyControlsInvalidOrPending(index: number): boolean {\n    const steps = this._steps.toArray();\n\n    steps[this._selectedIndex].interacted = true;\n\n    if (this._linear && index >= 0) {\n      return steps.slice(0, index).some(step => {\n        const control = step.stepControl;\n        const isIncomplete = control ?\n            (control.invalid || control.pending || !step.interacted) :\n            !step.completed;\n        return isIncomplete && !step.optional;\n      });\n    }\n\n    return false;\n  }\n\n  private _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Checks whether the stepper contains the focused element. */\n  private _containsFocus(): boolean {\n    if (!this._document || !this._elementRef) {\n      return false;\n    }\n\n    const stepperElement = this._elementRef.nativeElement;\n    const focusedElement = this._document.activeElement;\n    return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperNext {\n  /** Type of the next button. Defaults to \"submit\" if not specified. */\n  @Input() type: string = 'submit';\n\n  constructor(public _stepper: CdkStepper) {}\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperPrevious {\n  /** Type of the previous button. Defaults to \"button\" if not specified. */\n  @Input() type: string = 'button';\n\n  constructor(public _stepper: CdkStepper) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CommonModule} from '@angular/common';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n@NgModule({\n  imports: [BidiModule, CommonModule],\n  exports: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n  declarations: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]\n})\nexport class CdkStepperModule {}\n"],"names":["CdkStepLabel","template","this","type","Directive","args","selector","TemplateRef","nextId","StepperSelectionEvent","STEP_STATE","NUMBER","EDIT","DONE","ERROR","MAT_STEPPER_GLOBAL_OPTIONS","InjectionToken","CdkStep","_stepper","stepperOptions","interacted","_editable","_optional","_customCompleted","_customError","_stepperOptions","_displayDefaultIndicatorType","displayDefaultIndicatorType","_showError","showError","Object","defineProperty","prototype","value","coerceBooleanProperty","_getDefaultCompleted","stepControl","valid","_getDefaultError","invalid","select","selected","reset","ngOnChanges","_stateChanged","Component","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","Input","label","errorMessage","ariaLabel","ariaLabelledby","state","editable","optional","completed","hasError","CdkStepper","_changeDetectorRef","_elementRef","_selectedIndex","_groupId","_document","get","configurable","index","_steps","length","_anyControlsInvalidOrPending","toArray","_updateSelectedItemIndex","enumerable","selectedIndex","set","_keyManager","FocusKeyManager","_stepHeader","withWrap","withVerticalOrientation","_orientation","_dir","obaservableOf","pipe","startWith","_layoutDirection","takeUntil","_destroyed","subscribe","direction","_this","withHorizontalOrientation","updateActiveItemIndex","changes","Math","max","complete","forEach","step","position","isCurrentStep","_isCurrentStep","_getDefaultIndicatorLogic","_getGuidelineLogic","stepsArray","newIndex","previouslySelectedIndex","selectedStep","previouslySelectedStep","keyCode","event","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","onKeydown","activeItemIndex","steps","_linear","slice","some","control","stepperElement","nativeElement","focusedElement","activeElement","decorators","ElementRef","undefined","Inject","DOCUMENT","selectionChange","Output","CdkStepperNext","host","(click)","[type]","CdkStepperPrevious","NgModule","imports","BidiModule","CommonModule","exports","declarations","CdkStepperModule"],"mappings":"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"}